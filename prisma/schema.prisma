// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
    MALE
    FEMALE
}

enum Role {
    ADMIN
    USER
}

enum ConversationType {
    PRIVATE
    GROUP
}

enum MessageType {
    TEXT
    IMAGE
    VIDEO
    AUDIO
    FILE
    GIF
    STICKER
    LOCATION

    POLL // message contains polls or surveys
}

model User {
    id String @id @db.Text
    email String @db.Text @unique
    username String @db.Text @unique
    firstName String @db.Text @map("first_name")
    lastName String @db.Text @map("last_name")
    password String @db.Text
    birthday DateTime
    gender Gender
    role Role
    phoneNumber String @db.Text @map("phone_number")
    privacy String? @db.Text
    isActive Boolean @map("is_active")
    avatarUrl String? @db.Text @map("avatar_url")
    refreshToken String? @db.Text @map("refresh_token")

    participants Participant[]
    messages Message[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime? @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    @@map("user")
}

model Conversation {
    id String @id @db.Text
    type ConversationType

    createdAt DateTime @default(now()) @map("created_at")
    deletedAt DateTime? @map("deleted_at")

    group Group?
    participants Participant[]
    messages Message[]

    @@map("conversation")
}

model Group {
    id String @id @db.Text
    conversation Conversation @relation(fields: [id], references: [id], onDelete: Cascade) 
    creatorId String @db.Text @map("creator_id")
    name String @db.Text
    avatarUrl String? @db.Text @map("avatar_url")
    permission String? @db.Text

    updatedAt DateTime @map("updated_at")

    @@map("group")
}

model Participant {
    id String @id @db.Text
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @db.Text @map("user_id")
    conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    conversationId String @db.Text @map("conversation_id")

    joinedAt DateTime? @default(now()) @map("joined_at")
    leftAt DateTime? @map("left_at")

    @@map("participant")
}

model Message {
    id String @id @db.Text
    sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
    senderId String @db.Text 
    receiver Conversation @relation(fields: [receiverId], references: [id], onDelete: Cascade)
    receiverId String @db.Text
    message String @db.Text
    type MessageType

    attachments Attachment[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime? @map("updated_at")
    deletedAt DateTime? @map("deleted_at")

    @@map("message")
}

model Attachment {
    id String @id @db.Text
    message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
    messageId String @db.Text @map("message_id")
    thumbUrl String @db.Text @map("thumb_url") // thumbnail for image or video
    fileUrl String @db.Text @map("file_url")

    deletedAt DateTime? @map("deleted_at")

    @@map("attachment")
}
